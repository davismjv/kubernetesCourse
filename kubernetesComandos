kubectl run <nombre> --image=<imagen> --> crea un pod 
kubectl get pods --> lista de pods 
kubectl describe pod <nombre del pod> --> Muestra logs del pod 
kubectl api-resources --> Muestra recursos asociados a kubectl 
kubectl delete pods <listado de nombres de pods> --> borra lista de pods 
kubectl get pod <nombre pod> -o yaml --> entrega todos los datos del pod
kubectl exec -ti <nombre-pod> -- sh --> ingresa a terminal del contenedor
kubectl logs <nombre-pod>  --> logs de un pod
kubectl apply -f <nombre-archivo yaml>  --> ejecuta instrucciones de archivo yaml
kubectl delete -f <nombre-archivo yaml>  --> elimina pods y containers de archivo yaml
kubectl logs <pod> -c <contenedor>  --> muestra logs de 1 contenedor cuando el pod tiene varios contenedores
kubectl exec -ti <nombre-pod> -c <contenedor>-- sh --> ingresa a terminal del contenedor si en un pod hay varios contenedores
kubectl get pods -l <nombreLabel=valorLabel> --> muestra pods solo con cierto label
kubectl label pod <pod> <new-label=label>
kubectl get deployment --show-labels --> muestra labels
kubectl rollout status  deployment <nombre>--> muestra info del deployment
kubectl get deployment <nombre> --show-labels --> muestra Labels
kubectl rollout history deployment <nombre>  --> muestra las revisiones del deployment
kubectl apply -f  <nombre.yaml> --record  --> Guarda el comando ejecutado en la revision
kubectl rollout history deployment <nombre>  --revision=3--> muestra informacion detallada de la revision
kubectl rollout undo deployment <nombre>  --to-revision=3--> Realiza rollback a revision indicada
kubectl get svc -l app=fron --> muestra servicios con label app=front
kubectl get endpoints --> muestra endpoints
kubectl get pods -l app=front -o wide --> muetra mas datos de los pods
kubectl run --rm -ti <nombre-por> --image<nombre-imagen> --sh --> crea pod interactivo temporal para ingresar por sh
kubectl get namespaces --> muestra los namespaces
kubectl get pods --namespace <namespace>--> muestra los pods en el namespace
kubectl create namespace  <namespace>--> Crea namespace
svcName + nsName + svc.cluster.local --> asi se crean los dns de los servicios
kubectl confi current-context --> contexto actual
kubectl config view --> configuracion de donde se toma el contexto
kubectl config set-context ci-context --namespace=ci --cluster=minikube --user=minikube --> crea un nuevo contexto
kubectl config use-context <context-name> --> cambiar de contexto, un contexto apunto a un namespace
kubectl get limitRange--> muestra limits range
kubectl create configmap <nombre> --from-file=<ruta archivo>
kubectl create secrete generic <nombre> --from-file=<ruta> --> crea un secreto desde un archivo
envsubst < <archivo-origen> > <archivo-salida> --> sustituye las variables de entorno
kubectl edit <tipo objeto ><nombre objeto> --> permite editar el yaml de un objeto
kubectl cluster-info --> muestra informacion de donde esta corriendo el cluster
kubectl cluster-info dump | grep authorization-mode --> Verifica si RBAC esta habilitado
kubectl get sa --> Muestra los service accounts

Listar pods:
DOCS: https://v1-15.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.15/#-strong-api-overview-strong-

Para consultar dentro de un pod la api de kubernetes mediante get

curl https://10.96.0.1/api/v1/namespaces/default/pods/ --insecure

Para que funciones el token consultar ejemplo aca: https://medium.com/@nieldw/using-curl-to-authenticate-with-jwt-bearer-tokens-55b7fac506bd

Guardar el TOKEN
TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)

curl -H "Authorization: Bearer ${TOKEN}" https://kubernetes/api/v1/namespaces/default/pods/ --insecure --> usando el token segun explicacion de pagina web anterior

Listar Deployments:
curl -H "Authorization: Bearer ${TOKEN}" https://kubernetes/apis/apps/v1/namespaces/default/deployments/ --insecure

Listar Replicasets:
curl -H "Authorization: Bearer ${TOKEN}" https://kubernetes/apis/apps/v1/namespaces/default/replicasets/ --insecure

Muestra la url del servicio para acceder de forma externa
minikube service ingress-nginx --url -n ingress-nginx
minikue service <service-name> --url -n ingress-nginx